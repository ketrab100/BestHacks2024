Index: BestHacks2024/Services/JobService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using AutoMapper;\nusing BestHacks2024.Database;\nusing BestHacks2024.Database.Entities;\nusing BestHacks2024.Dtos;\nusing BestHacks2024.Interfaces;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace BestHacks2024.Services;\n\npublic class JobService : IJobService\n{\n    private readonly BestHacksDbContext _context;\n    private readonly IMapper _mapper;\n    public JobService(BestHacksDbContext context, IMapper mapper)\n    {\n        _context = context;\n        _mapper = mapper;\n    }\n    public async Task<IEnumerable<Job>> GetJobsAsync()\n    {\n        return await _context\n            .Jobs\n            .AsNoTracking()\n            .ToListAsync();\n    }\n\n    public async Task<Job?> GetJobByIdAsync(Guid jobId)\n    {\n        return await _context\n            .Jobs\n            .AsNoTracking()\n            .FirstOrDefaultAsync(x => x.Id == jobId);\n    }\n\n    public async Task<Job?> GetNextJobAsync()\n    {\n        throw new NotImplementedException();\n    }\n\n    public async Task<Job> AddJobAsync(JobDto jobDto)\n    {\n        var employer = await _context.Employers.FirstOrDefaultAsync(x => x.Id == jobDto.EmployerId);\n        if (employer == null)\n        {\n            throw new Exception(\"Employer not found\");\n        }\n\n        var tagIds = jobDto.Tags.Select(t => t.Id).ToList();\n        var existingTags = await _context.Tags\n            .Where(t => tagIds.Contains(t.Id))\n            .ToListAsync();\n\n        var job = _mapper.Map<Job>(jobDto);\n\n        job.Employer = employer;\n\n        job.JobTags = existingTags.Select(tag => new JobTag\n        {\n            TagId = tag.Id,\n            Tag = tag\n        }).ToList();\n\n        _context.Jobs.Add(job);\n        await _context.SaveChangesAsync();\n\n        return job;\n    }\n\n    public async Task<Job> UpdateJobAsync(Guid jobId, JobDto job)\n    {\n        throw new NotImplementedException();\n    }\n\n    public async Task DeleteJobAsync(Guid jobId)\n    {\n        throw new NotImplementedException();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BestHacks2024/Services/JobService.cs b/BestHacks2024/Services/JobService.cs
--- a/BestHacks2024/Services/JobService.cs	(revision 8e5b706a00957ccf11dc3afb3ad328e640fb1770)
+++ b/BestHacks2024/Services/JobService.cs	(date 1728759432384)
@@ -1,9 +1,12 @@
+using System.Security.Claims;
 using AutoMapper;
 using BestHacks2024.Database;
 using BestHacks2024.Database.Entities;
 using BestHacks2024.Dtos;
 using BestHacks2024.Interfaces;
 using Microsoft.EntityFrameworkCore;
+using RestSharp;
+using RestSharp.Authenticators;
 
 namespace BestHacks2024.Services;
 
@@ -32,8 +35,24 @@
             .FirstOrDefaultAsync(x => x.Id == jobId);
     }
 
-    public async Task<Job?> GetNextJobAsync()
+    public async Task<List<Job>> GetNextJobAsync(Guid userId, CancellationToken cancellationToken)
     {
+        var options = new RestClientOptions($"http://localhost:8000/matches/");
+        var client = new RestClient(options);
+        var request = new RestRequest($"job/{userId}/");
+        var response = await client.GetAsync<List<JobAiDto>>(request, cancellationToken);
+        var aiJobs = new List<JobAiDto>();
+        
+        if (response is not null)
+        {
+           aiJobs = response.Where(x => x.Score > 0).ToList();
+        }
+        
+        var jobs = await _context.Jobs.Where(x => aiJobs.Select(y => y.Id).Contains(x.Id)).ToListAsync(cancellationToken);
+
+        var restOfJobs = await _context.Jobs.Where(x=>x.)
+        
+        
         throw new NotImplementedException();
     }
 
